import java.time.LocalDateTime
import java.util.concurrent.atomic.AtomicLong
import static groovy.time.TimeCategory.minus

apply plugin: 'groovy'
// http://central.sonatype.org/pages/gradle.html. Maven plugin deprecated, but it is only described way for Central repository
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'signing'

group = 'info.hubbitus'
version = '1.8'

repositories {
	jcenter()
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
	// 'compile', not 'implementation'! See https://stackoverflow.com/questions/52218749/gradle-changing-compile-to-implementation-get-error
	// Otherwise you got: error: cannot access GroovyObject on usage side
	compile 'org.codehaus.groovy:groovy:3.0.6'
	implementation 'org.codehaus.groovy:groovy-templates:3.0.6'

	implementation 'org.slf4j:slf4j-api:1.7.12'
	implementation 'ch.qos.logback:logback-classic:1.1.3' // dual EPL v.1.0 and LGPL 2.1

	// mandatory dependencies for using Spock
	testImplementation 'org.spockframework:spock-core:2.0-M4-groovy-3.0'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.0' // For Spock
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0' // For Java-Junit
	testImplementation 'org.codehaus.gpars:gpars:1.2.1'
	testImplementation 'org.hamcrest:hamcrest-library:1.3' // Tests regexp checks. See http://matchers.jcabi.com/regex-matchers.html
	testImplementation 'com.jcabi:jcabi-matchers:1.4' // Tests regexp checks. See http://matchers.jcabi.com/regex-matchers.html

	// For test Java version compatible with Lombok
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

wrapper {
	gradleVersion = '6.7'
}

// Count tests. Unfortunately it is not possible count total amount of tests. See @issue https://github.com/gradle/gradle/issues/2129
def testNo = new AtomicLong()
test{
	// @see https://blog.gradle.org/stop-rerunning-tests
	inputs.property "integration.date", LocalDateTime.now()
	outputs.upToDateWhen { false }

	useJUnitPlatform()

	testLogging { // http://mrhaki.blogspot.ru/2013/05/gradle-goodness-show-more-information.html, http://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time/36130467#36130467
		// set options for log level LIFECYCLE
		events = [ 'skipped', 'failed' ]
		showExceptions = true
		exceptionFormat = 'full'
		showCauses = true
		showStackTraces = true

		// set options for log level DEBUG and INFO
		debug {
//			events = ['started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError']
			events = ['passed', 'skipped', 'failed']
			exceptionFormat = 'full'
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat
	}
	reports {
		html.enabled = true
		html.destination file("${project.rootDir}/build/testReport.html")
	}
	afterTest { desc, result ->
		logger.quiet "${testNo.incrementAndGet()}) Done [${desc.className}#${desc.name}] with result: ${result.resultType} (time: ${minus(new Date(result.endTime as long), new Date(result.startTime as long))})"
	}

	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}
	}
}

///////////////////////////////////////////////////////////////
// Artifacts publishing into central OSS repository
// http://central.sonatype.org/pages/gradle.html
task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}
signing {
//    required { gradle.taskGraph.hasTask("uploadArchives") } // https://groups.google.com/forum/#!topic/gaelyk/WfdEDBOzIOM
	sign configurations.archives
}

// Direct variables will read f.e. from ~/.gradle/gradle.properties - read env for CI
ext{
	ossrhUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.env.ossrhUsername
	ossrhPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.env.ossrhPassword
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name project.name
				packaging 'jar'
				description 'Collection of tiny but very helpful utility classes like ProgressLogger, ConfigExtended and some benchmark classes. Java and Groovy.'
				url 'https://github.com/Hubbitus/Hubbitus-common'

				scm {
					connection 'scm:git:git@github.com:Hubbitus/Hubbitus-common.git'
					developerConnection 'scm:git:git@github.com:Hubbitus/Hubbitus-common.git'
					url 'https://github.com/Hubbitus/Hubbitus-common'
				}

				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id 'Hubbitus'
						name 'Pavel Alexeev'
						email 'Pahan@Hubbitus.info'
					}
				}
			}
		}
	}
}
// /Artifacts publishing into central OSS repository
////////////////////////////////////////////////////
